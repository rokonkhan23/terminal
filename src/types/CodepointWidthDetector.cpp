// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

#include "precomp.h"
#include "inc/CodepointWidthDetector.hpp"

#include <icu.h>

// We know that ucdToClusterBreak() can never return anything >=CB_COUNT, but the compiler doesn't.
#pragma warning(disable : 26446) // Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
#pragma warning(disable : 26482) // Only index into arrays using constant expressions (bounds.2).
// ICU doesn't play well with MSVC's linter.
#pragma warning(disable : 26476) // Expression/symbol '...' uses a naked union '...' with multiple type pointers: Use variant instead (type.7).
#pragma warning(disable : 26481) // Don't use pointer arithmetic. Use span instead (bounds.1).

namespace
{
    // used to store range data in CodepointWidthDetector's internal map
    struct UnicodeRange final
    {
        char32_t lowerBound;
        char32_t upperBound : 31;
        char32_t isAmbiguous : 1;
    };

    static bool operator<(const UnicodeRange& range, const unsigned int searchTerm) noexcept
    {
        return range.upperBound < searchTerm;
    }

    // Generated by Generate-CodepointWidthsFromUCD.ps1 -Pack:True -Full: -NoOverrides:False
    // on 2024-03-20 12:57:23Z from Unicode 15.1.0.
    // 321154 (0x4E682) codepoints covered.
    // 240 (0xF0) codepoints overridden.
    // Override path: .\src\types\unicode_width_overrides.xml
    static constexpr std::array<UnicodeRange, 296> s_wideAndAmbiguousTable{
        UnicodeRange{ 0xa1, 0xa1, 1 },
        UnicodeRange{ 0xa4, 0xa4, 1 },
        UnicodeRange{ 0xa7, 0xa8, 1 },
        UnicodeRange{ 0xaa, 0xaa, 1 },
        UnicodeRange{ 0xad, 0xae, 1 },
        UnicodeRange{ 0xb0, 0xb4, 1 },
        UnicodeRange{ 0xb6, 0xba, 1 },
        UnicodeRange{ 0xbc, 0xbf, 1 },
        UnicodeRange{ 0xc6, 0xc6, 1 },
        UnicodeRange{ 0xd0, 0xd0, 1 },
        UnicodeRange{ 0xd7, 0xd8, 1 },
        UnicodeRange{ 0xde, 0xe1, 1 },
        UnicodeRange{ 0xe6, 0xe6, 1 },
        UnicodeRange{ 0xe8, 0xea, 1 },
        UnicodeRange{ 0xec, 0xed, 1 },
        UnicodeRange{ 0xf0, 0xf0, 1 },
        UnicodeRange{ 0xf2, 0xf3, 1 },
        UnicodeRange{ 0xf7, 0xfa, 1 },
        UnicodeRange{ 0xfc, 0xfc, 1 },
        UnicodeRange{ 0xfe, 0xfe, 1 },
        UnicodeRange{ 0x101, 0x101, 1 },
        UnicodeRange{ 0x111, 0x111, 1 },
        UnicodeRange{ 0x113, 0x113, 1 },
        UnicodeRange{ 0x11b, 0x11b, 1 },
        UnicodeRange{ 0x126, 0x127, 1 },
        UnicodeRange{ 0x12b, 0x12b, 1 },
        UnicodeRange{ 0x131, 0x133, 1 },
        UnicodeRange{ 0x138, 0x138, 1 },
        UnicodeRange{ 0x13f, 0x142, 1 },
        UnicodeRange{ 0x144, 0x144, 1 },
        UnicodeRange{ 0x148, 0x14b, 1 },
        UnicodeRange{ 0x14d, 0x14d, 1 },
        UnicodeRange{ 0x152, 0x153, 1 },
        UnicodeRange{ 0x166, 0x167, 1 },
        UnicodeRange{ 0x16b, 0x16b, 1 },
        UnicodeRange{ 0x1ce, 0x1ce, 1 },
        UnicodeRange{ 0x1d0, 0x1d0, 1 },
        UnicodeRange{ 0x1d2, 0x1d2, 1 },
        UnicodeRange{ 0x1d4, 0x1d4, 1 },
        UnicodeRange{ 0x1d6, 0x1d6, 1 },
        UnicodeRange{ 0x1d8, 0x1d8, 1 },
        UnicodeRange{ 0x1da, 0x1da, 1 },
        UnicodeRange{ 0x1dc, 0x1dc, 1 },
        UnicodeRange{ 0x251, 0x251, 1 },
        UnicodeRange{ 0x261, 0x261, 1 },
        UnicodeRange{ 0x2c4, 0x2c4, 1 },
        UnicodeRange{ 0x2c7, 0x2c7, 1 },
        UnicodeRange{ 0x2c9, 0x2cb, 1 },
        UnicodeRange{ 0x2cd, 0x2cd, 1 },
        UnicodeRange{ 0x2d0, 0x2d0, 1 },
        UnicodeRange{ 0x2d8, 0x2db, 1 },
        UnicodeRange{ 0x2dd, 0x2dd, 1 },
        UnicodeRange{ 0x2df, 0x2df, 1 },
        UnicodeRange{ 0x300, 0x36f, 1 },
        UnicodeRange{ 0x391, 0x3a1, 1 },
        UnicodeRange{ 0x3a3, 0x3a9, 1 },
        UnicodeRange{ 0x3b1, 0x3c1, 1 },
        UnicodeRange{ 0x3c3, 0x3c9, 1 },
        UnicodeRange{ 0x401, 0x401, 1 },
        UnicodeRange{ 0x410, 0x44f, 1 },
        UnicodeRange{ 0x451, 0x451, 1 },
        UnicodeRange{ 0x1100, 0x115f, 0 },
        UnicodeRange{ 0x2010, 0x2010, 1 },
        UnicodeRange{ 0x2013, 0x2016, 1 },
        UnicodeRange{ 0x2018, 0x2019, 1 },
        UnicodeRange{ 0x201c, 0x201d, 1 },
        UnicodeRange{ 0x2020, 0x2022, 1 },
        UnicodeRange{ 0x2024, 0x2027, 1 },
        UnicodeRange{ 0x2030, 0x2030, 1 },
        UnicodeRange{ 0x2032, 0x2033, 1 },
        UnicodeRange{ 0x2035, 0x2035, 1 },
        UnicodeRange{ 0x203b, 0x203b, 1 },
        UnicodeRange{ 0x203e, 0x203e, 1 },
        UnicodeRange{ 0x2074, 0x2074, 1 },
        UnicodeRange{ 0x207f, 0x207f, 1 },
        UnicodeRange{ 0x2081, 0x2084, 1 },
        UnicodeRange{ 0x20ac, 0x20ac, 1 },
        UnicodeRange{ 0x2103, 0x2103, 1 },
        UnicodeRange{ 0x2105, 0x2105, 1 },
        UnicodeRange{ 0x2109, 0x2109, 1 },
        UnicodeRange{ 0x2113, 0x2113, 1 },
        UnicodeRange{ 0x2116, 0x2116, 1 },
        UnicodeRange{ 0x2121, 0x2122, 1 },
        UnicodeRange{ 0x2126, 0x2126, 1 },
        UnicodeRange{ 0x212b, 0x212b, 1 },
        UnicodeRange{ 0x2153, 0x2154, 1 },
        UnicodeRange{ 0x215b, 0x215e, 1 },
        UnicodeRange{ 0x2160, 0x216b, 1 },
        UnicodeRange{ 0x2170, 0x2179, 1 },
        UnicodeRange{ 0x2189, 0x2189, 1 },
        UnicodeRange{ 0x2190, 0x2199, 1 },
        UnicodeRange{ 0x21b8, 0x21b9, 1 },
        UnicodeRange{ 0x21d2, 0x21d2, 1 },
        UnicodeRange{ 0x21d4, 0x21d4, 1 },
        UnicodeRange{ 0x21e7, 0x21e7, 1 },
        UnicodeRange{ 0x2200, 0x2200, 1 },
        UnicodeRange{ 0x2202, 0x2203, 1 },
        UnicodeRange{ 0x2207, 0x2208, 1 },
        UnicodeRange{ 0x220b, 0x220b, 1 },
        UnicodeRange{ 0x220f, 0x220f, 1 },
        UnicodeRange{ 0x2211, 0x2211, 1 },
        UnicodeRange{ 0x2215, 0x2215, 1 },
        UnicodeRange{ 0x221a, 0x221a, 1 },
        UnicodeRange{ 0x221d, 0x2220, 1 },
        UnicodeRange{ 0x2223, 0x2223, 1 },
        UnicodeRange{ 0x2225, 0x2225, 1 },
        UnicodeRange{ 0x2227, 0x222c, 1 },
        UnicodeRange{ 0x222e, 0x222e, 1 },
        UnicodeRange{ 0x2234, 0x2237, 1 },
        UnicodeRange{ 0x223c, 0x223d, 1 },
        UnicodeRange{ 0x2248, 0x2248, 1 },
        UnicodeRange{ 0x224c, 0x224c, 1 },
        UnicodeRange{ 0x2252, 0x2252, 1 },
        UnicodeRange{ 0x2260, 0x2261, 1 },
        UnicodeRange{ 0x2264, 0x2267, 1 },
        UnicodeRange{ 0x226a, 0x226b, 1 },
        UnicodeRange{ 0x226e, 0x226f, 1 },
        UnicodeRange{ 0x2282, 0x2283, 1 },
        UnicodeRange{ 0x2286, 0x2287, 1 },
        UnicodeRange{ 0x2295, 0x2295, 1 },
        UnicodeRange{ 0x2299, 0x2299, 1 },
        UnicodeRange{ 0x22a5, 0x22a5, 1 },
        UnicodeRange{ 0x22bf, 0x22bf, 1 },
        UnicodeRange{ 0x2312, 0x2312, 1 },
        UnicodeRange{ 0x231a, 0x231b, 0 },
        UnicodeRange{ 0x2329, 0x232a, 0 },
        UnicodeRange{ 0x23e9, 0x23ec, 0 },
        UnicodeRange{ 0x23f0, 0x23f0, 0 },
        UnicodeRange{ 0x23f3, 0x23f3, 0 },
        UnicodeRange{ 0x2460, 0x24e9, 1 },
        UnicodeRange{ 0x24eb, 0x24ff, 1 },
        UnicodeRange{ 0x25a0, 0x25a1, 1 },
        UnicodeRange{ 0x25a3, 0x25a9, 1 },
        UnicodeRange{ 0x25b2, 0x25b3, 1 },
        UnicodeRange{ 0x25b6, 0x25b7, 1 },
        UnicodeRange{ 0x25bc, 0x25bd, 1 },
        UnicodeRange{ 0x25c0, 0x25c1, 1 },
        UnicodeRange{ 0x25c6, 0x25c8, 1 },
        UnicodeRange{ 0x25cb, 0x25cb, 1 },
        UnicodeRange{ 0x25ce, 0x25d1, 1 },
        UnicodeRange{ 0x25e2, 0x25e5, 1 },
        UnicodeRange{ 0x25ef, 0x25ef, 1 },
        UnicodeRange{ 0x25fd, 0x25fe, 0 },
        UnicodeRange{ 0x2605, 0x2606, 1 },
        UnicodeRange{ 0x2609, 0x2609, 1 },
        UnicodeRange{ 0x260e, 0x260f, 1 },
        UnicodeRange{ 0x2614, 0x2615, 0 },
        UnicodeRange{ 0x261c, 0x261c, 1 },
        UnicodeRange{ 0x261e, 0x261e, 1 },
        UnicodeRange{ 0x2640, 0x2640, 1 },
        UnicodeRange{ 0x2642, 0x2642, 1 },
        UnicodeRange{ 0x2648, 0x2653, 0 },
        UnicodeRange{ 0x2660, 0x2661, 1 },
        UnicodeRange{ 0x2663, 0x2665, 1 },
        UnicodeRange{ 0x2667, 0x266a, 1 },
        UnicodeRange{ 0x266c, 0x266d, 1 },
        UnicodeRange{ 0x266f, 0x266f, 1 },
        UnicodeRange{ 0x267f, 0x267f, 0 },
        UnicodeRange{ 0x2693, 0x2693, 0 },
        UnicodeRange{ 0x269e, 0x269f, 1 },
        UnicodeRange{ 0x26a1, 0x26a1, 0 },
        UnicodeRange{ 0x26aa, 0x26ab, 0 },
        UnicodeRange{ 0x26bd, 0x26be, 0 },
        UnicodeRange{ 0x26bf, 0x26bf, 1 },
        UnicodeRange{ 0x26c4, 0x26c5, 0 },
        UnicodeRange{ 0x26c6, 0x26cd, 1 },
        UnicodeRange{ 0x26ce, 0x26ce, 0 },
        UnicodeRange{ 0x26cf, 0x26d3, 1 },
        UnicodeRange{ 0x26d4, 0x26d4, 0 },
        UnicodeRange{ 0x26d5, 0x26e1, 1 },
        UnicodeRange{ 0x26e3, 0x26e3, 1 },
        UnicodeRange{ 0x26e8, 0x26e9, 1 },
        UnicodeRange{ 0x26ea, 0x26ea, 0 },
        UnicodeRange{ 0x26eb, 0x26f1, 1 },
        UnicodeRange{ 0x26f2, 0x26f3, 0 },
        UnicodeRange{ 0x26f4, 0x26f4, 1 },
        UnicodeRange{ 0x26f5, 0x26f5, 0 },
        UnicodeRange{ 0x26f6, 0x26f9, 1 },
        UnicodeRange{ 0x26fa, 0x26fa, 0 },
        UnicodeRange{ 0x26fb, 0x26fc, 1 },
        UnicodeRange{ 0x26fd, 0x26fd, 0 },
        UnicodeRange{ 0x26fe, 0x26ff, 1 },
        UnicodeRange{ 0x2705, 0x2705, 0 },
        UnicodeRange{ 0x270a, 0x270b, 0 },
        UnicodeRange{ 0x2728, 0x2728, 0 },
        UnicodeRange{ 0x273d, 0x273d, 1 },
        UnicodeRange{ 0x274c, 0x274c, 0 },
        UnicodeRange{ 0x274e, 0x274e, 0 },
        UnicodeRange{ 0x2753, 0x2755, 0 },
        UnicodeRange{ 0x2757, 0x2757, 0 },
        UnicodeRange{ 0x2776, 0x277f, 1 },
        UnicodeRange{ 0x2795, 0x2797, 0 },
        UnicodeRange{ 0x27b0, 0x27b0, 0 },
        UnicodeRange{ 0x27bf, 0x27bf, 0 },
        UnicodeRange{ 0x2b1b, 0x2b1c, 0 },
        UnicodeRange{ 0x2b50, 0x2b50, 0 },
        UnicodeRange{ 0x2b55, 0x2b55, 0 },
        UnicodeRange{ 0x2b56, 0x2b59, 1 },
        UnicodeRange{ 0x2e80, 0x2e99, 0 },
        UnicodeRange{ 0x2e9b, 0x2ef3, 0 },
        UnicodeRange{ 0x2f00, 0x2fd5, 0 },
        UnicodeRange{ 0x2ff0, 0x303e, 0 },
        UnicodeRange{ 0x3041, 0x3096, 0 },
        UnicodeRange{ 0x3099, 0x30ff, 0 },
        UnicodeRange{ 0x3105, 0x312f, 0 },
        UnicodeRange{ 0x3131, 0x318e, 0 },
        UnicodeRange{ 0x3190, 0x31e3, 0 },
        UnicodeRange{ 0x31ef, 0x321e, 0 },
        UnicodeRange{ 0x3220, 0x3247, 0 },
        UnicodeRange{ 0x3248, 0x324f, 1 },
        UnicodeRange{ 0x3250, 0x4dbf, 0 },
        UnicodeRange{ 0x4e00, 0xa48c, 0 },
        UnicodeRange{ 0xa490, 0xa4c6, 0 },
        UnicodeRange{ 0xa960, 0xa97c, 0 },
        UnicodeRange{ 0xac00, 0xd7a3, 0 },
        UnicodeRange{ 0xe000, 0xf8ff, 1 },
        UnicodeRange{ 0xf900, 0xfaff, 0 },
        UnicodeRange{ 0xfe00, 0xfe0f, 1 },
        UnicodeRange{ 0xfe10, 0xfe19, 0 },
        UnicodeRange{ 0xfe30, 0xfe52, 0 },
        UnicodeRange{ 0xfe54, 0xfe66, 0 },
        UnicodeRange{ 0xfe68, 0xfe6b, 0 },
        UnicodeRange{ 0xff01, 0xff60, 0 },
        UnicodeRange{ 0xffe0, 0xffe6, 0 },
        UnicodeRange{ 0xfffd, 0xfffd, 1 },
        UnicodeRange{ 0x16fe0, 0x16fe4, 0 },
        UnicodeRange{ 0x16ff0, 0x16ff1, 0 },
        UnicodeRange{ 0x17000, 0x187f7, 0 },
        UnicodeRange{ 0x18800, 0x18cd5, 0 },
        UnicodeRange{ 0x18d00, 0x18d08, 0 },
        UnicodeRange{ 0x1aff0, 0x1aff3, 0 },
        UnicodeRange{ 0x1aff5, 0x1affb, 0 },
        UnicodeRange{ 0x1affd, 0x1affe, 0 },
        UnicodeRange{ 0x1b000, 0x1b122, 0 },
        UnicodeRange{ 0x1b132, 0x1b132, 0 },
        UnicodeRange{ 0x1b150, 0x1b152, 0 },
        UnicodeRange{ 0x1b155, 0x1b155, 0 },
        UnicodeRange{ 0x1b164, 0x1b167, 0 },
        UnicodeRange{ 0x1b170, 0x1b2fb, 0 },
        UnicodeRange{ 0x1f004, 0x1f004, 0 },
        UnicodeRange{ 0x1f0cf, 0x1f0cf, 0 },
        UnicodeRange{ 0x1f100, 0x1f10a, 1 },
        UnicodeRange{ 0x1f110, 0x1f12d, 1 },
        UnicodeRange{ 0x1f130, 0x1f169, 1 },
        UnicodeRange{ 0x1f170, 0x1f18d, 1 },
        UnicodeRange{ 0x1f18e, 0x1f18e, 0 },
        UnicodeRange{ 0x1f18f, 0x1f190, 1 },
        UnicodeRange{ 0x1f191, 0x1f19a, 0 },
        UnicodeRange{ 0x1f19b, 0x1f1ac, 1 },
        UnicodeRange{ 0x1f1e6, 0x1f202, 0 },
        UnicodeRange{ 0x1f210, 0x1f23b, 0 },
        UnicodeRange{ 0x1f240, 0x1f248, 0 },
        UnicodeRange{ 0x1f250, 0x1f251, 0 },
        UnicodeRange{ 0x1f260, 0x1f265, 0 },
        UnicodeRange{ 0x1f300, 0x1f320, 0 },
        UnicodeRange{ 0x1f32d, 0x1f335, 0 },
        UnicodeRange{ 0x1f337, 0x1f37c, 0 },
        UnicodeRange{ 0x1f37e, 0x1f393, 0 },
        UnicodeRange{ 0x1f3a0, 0x1f3ca, 0 },
        UnicodeRange{ 0x1f3cf, 0x1f3d3, 0 },
        UnicodeRange{ 0x1f3e0, 0x1f3f0, 0 },
        UnicodeRange{ 0x1f3f4, 0x1f3f4, 0 },
        UnicodeRange{ 0x1f3f8, 0x1f43e, 0 },
        UnicodeRange{ 0x1f440, 0x1f440, 0 },
        UnicodeRange{ 0x1f442, 0x1f4fc, 0 },
        UnicodeRange{ 0x1f4ff, 0x1f53d, 0 },
        UnicodeRange{ 0x1f54b, 0x1f54e, 0 },
        UnicodeRange{ 0x1f550, 0x1f567, 0 },
        UnicodeRange{ 0x1f57a, 0x1f57a, 0 },
        UnicodeRange{ 0x1f595, 0x1f596, 0 },
        UnicodeRange{ 0x1f5a4, 0x1f5a4, 0 },
        UnicodeRange{ 0x1f5fb, 0x1f64f, 0 },
        UnicodeRange{ 0x1f680, 0x1f6c5, 0 },
        UnicodeRange{ 0x1f6cc, 0x1f6cc, 0 },
        UnicodeRange{ 0x1f6d0, 0x1f6d2, 0 },
        UnicodeRange{ 0x1f6d5, 0x1f6d7, 0 },
        UnicodeRange{ 0x1f6dc, 0x1f6df, 0 },
        UnicodeRange{ 0x1f6eb, 0x1f6ec, 0 },
        UnicodeRange{ 0x1f6f4, 0x1f6fc, 0 },
        UnicodeRange{ 0x1f7e0, 0x1f7eb, 0 },
        UnicodeRange{ 0x1f7f0, 0x1f7f0, 0 },
        UnicodeRange{ 0x1f90c, 0x1f93a, 0 },
        UnicodeRange{ 0x1f93c, 0x1f945, 0 },
        UnicodeRange{ 0x1f947, 0x1f9ff, 0 },
        UnicodeRange{ 0x1fa70, 0x1fa7c, 0 },
        UnicodeRange{ 0x1fa80, 0x1fa88, 0 },
        UnicodeRange{ 0x1fa90, 0x1fabd, 0 },
        UnicodeRange{ 0x1fabf, 0x1fac5, 0 },
        UnicodeRange{ 0x1face, 0x1fadb, 0 },
        UnicodeRange{ 0x1fae0, 0x1fae8, 0 },
        UnicodeRange{ 0x1faf0, 0x1faf8, 0 },
        UnicodeRange{ 0x20000, 0x2fffd, 0 },
        UnicodeRange{ 0x30000, 0x3fffd, 0 },
        UnicodeRange{ 0xe0100, 0xe01ef, 1 },
        UnicodeRange{ 0xf0000, 0xffffd, 1 },
        UnicodeRange{ 0x100000, 0x10fffd, 1 },
    };
}

// s_stage1/2/3/4 represents a multi-stage table, aka trie.
// The highest bits of the codepoint are an index into s_stage1, which selects a row in s_stage2.
// The next couple bits of the codepoint then select the column in that row.
// This continues until the last stage which contains the final value.
//
// Fundamentally, the trie is generated by taking all 1114112 codepoints and their assigned values and deduplicating
// chunks of e.g. 16 values each. Each deduplicated chunk is assigned its offset in the list of all deduplicated chunks.
// This results in two lists: 1114112/16=7132 IDs and however many deduplicated chunks you have accumulated.
// This is often called a two-stage table.
//
// If you want to look up the value now, you'll first find the deduplicated chunk offset via `offsets[codepoint / 16]`.
// This gives you the location of your chunk. Now you just look up the value with `values[offset + (codepoint & 15)]`.
//
// Since the 7132 offsets take up a lot more space than the deduplicated values (at least in case of the Unicode database),
// this process can be repeated by compressing the offset array the exact same way the values got compressed and so on.

// s_joinRules represents the UAX #29 extended grapheme cluster rules, however slightly modified to fit our needs.
// Specifically, UAX #29 states:
// > Note: Testing two adjacent characters is insufficient for determining a boundary.
//
// I completely agree, but I really hate it. So this code trades off correctness for simplicity
// by using a simple lookup table anyway. Under most circumstances users won't notice,
// because as far as I can see this only behaves different for degenerate ("invalid") Unicode.
// It reduces our code complexity significantly and is way *way* faster.
//
// This is a great reference for the s_joinRules table:
//   https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html

// Generated by CodepointWidthDetector_triegen.go
// on 2024-03-20T15:11:50Z, from Unicode 15.1.0, 8568 bytes
// clang-format off
static constexpr uint16_t s_stage1[] = {
    0x0000, 0x0010, 0x0020, 0x0030, 0x0033, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x004d, 0x005d, 0x005f, 0x0068, 0x0078, 0x007f,
    0x008f, 0x009f, 0x00af, 0x00bb, 0x00af, 0x00af, 0x00c1, 0x0041, 0x00d1, 0x00af, 0x00df, 0x00ef, 0x00fc, 0x010c, 0x011c, 0x012c,
    0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x013c,
    0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x013c,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x014c, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af, 0x00af,
    0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x015c,
    0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x0078, 0x015c,
};
static constexpr uint16_t s_stage2[] = {
    0x0000, 0x0010, 0x001e, 0x002e, 0x003e, 0x0047, 0x0057, 0x0067, 0x0077, 0x0087, 0x0097, 0x00a7, 0x00b7, 0x00c7, 0x00d7, 0x00e6,
    0x00f4, 0x0104, 0x0114, 0x011f, 0x0114, 0x0114, 0x0114, 0x012e, 0x013e, 0x014c, 0x015b, 0x016b, 0x017b, 0x018b, 0x0114, 0x0114,
    0x019b, 0x01ab, 0x01bb, 0x01ca, 0x01da, 0x01ea, 0x01fa, 0x020a, 0x0114, 0x0217, 0x0114, 0x0227, 0x022d, 0x023d, 0x024d, 0x025d,
    0x026c, 0x027c, 0x028b, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295,
    0x0299, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295,
    0x0295, 0x02a9, 0x0114, 0x02b6, 0x0114, 0x02c6, 0x02d6, 0x02e5, 0x02f5, 0x0305, 0x0307, 0x0309, 0x030b, 0x0306, 0x0308, 0x030a,
    0x0305, 0x0307, 0x0309, 0x030b, 0x0306, 0x0308, 0x030a, 0x0305, 0x0307, 0x0309, 0x030b, 0x0306, 0x0308, 0x030a, 0x0305, 0x0315,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325,
    0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0295, 0x0295, 0x0335, 0x0114, 0x0114, 0x0345, 0x0355, 0x0114,
    0x0365, 0x0375, 0x0384, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0394, 0x0114, 0x0114, 0x03a3, 0x03a9, 0x03b9, 0x03c9,
    0x03d9, 0x03e7, 0x03f7, 0x0404, 0x0411, 0x041f, 0x042e, 0x043c, 0x0449, 0x0459, 0x0114, 0x0467, 0x0474, 0x047e, 0x048e, 0x0114,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x049b,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x04a1, 0x04b1, 0x0114, 0x0114, 0x0114,
    0x04bd, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x04cd, 0x0295, 0x0295, 0x0295, 0x0295, 0x04dd, 0x04ed, 0x0114,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x04ee, 0x0295,
    0x04fe, 0x0505, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0515, 0x0114, 0x0114, 0x0114, 0x0114,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0525, 0x0114, 0x052f, 0x053b, 0x0114,
    0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x054b, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x055b, 0x04b1, 0x0564, 0x0114,
    0x0573, 0x0114, 0x0114, 0x0114, 0x0582, 0x0590, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x0114, 0x05a0, 0x05b0, 0x05c0, 0x05d0,
    0x05e0, 0x05f0, 0x0600, 0x0610, 0x0620, 0x0630, 0x0640, 0x0114, 0x0650, 0x0650, 0x0650, 0x0651, 0x0295, 0x0295, 0x0295, 0x0295,
    0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0295, 0x0661, 0x0671, 0x0681, 0x0690, 0x0690,
    0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0690, 0x0325, 0x0325, 0x0325, 0x0325,
    0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x0325, 0x06a0,
};
static constexpr uint16_t s_stage3[] = {
    0x0000, 0x0000, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0011, 0x0000, 0x0000, 0x0021, 0x0031, 0x0041, 0x0051, 0x005f, 0x0069,
    0x0076, 0x0085, 0x0091, 0x00a0, 0x00af, 0x00bd, 0x0091, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0078, 0x00cd, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0076, 0x0076, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00da, 0x00e7, 0x0010, 0x0010, 0x00f7, 0x00f7,
    0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x0010, 0x0010, 0x0107, 0x0115, 0x0107, 0x0115, 0x0010, 0x0010, 0x0010, 0x0076, 0x0125,
    0x0125, 0x0125, 0x0125, 0x0076, 0x0010, 0x0010, 0x0135, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0144, 0x00f7, 0x0146, 0x0154, 0x0010, 0x0010, 0x0010, 0x0164, 0x0174, 0x0010, 0x0010, 0x0181, 0x00f7, 0x0010, 0x0190, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x019a, 0x01a9, 0x0010, 0x01b7, 0x01c7, 0x0010, 0x00f7, 0x01d7, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x013f, 0x0190, 0x0010, 0x0010, 0x0181, 0x01de, 0x0010, 0x01ec, 0x01f8, 0x0010, 0x0010, 0x0206, 0x0010, 0x0010, 0x0010,
    0x0216, 0x0010, 0x0010, 0x016a, 0x00f7, 0x0224, 0x00f7, 0x018d, 0x0010, 0x0010, 0x0234, 0x0242, 0x0252, 0x0260, 0x0010, 0x026f,
    0x0010, 0x0010, 0x0273, 0x0281, 0x028f, 0x0260, 0x0297, 0x026f, 0x0010, 0x0010, 0x0273, 0x02a7, 0x01c7, 0x0010, 0x02b3, 0x026f,
    0x0010, 0x0010, 0x0273, 0x02c3, 0x0010, 0x0260, 0x016a, 0x026f, 0x0010, 0x0010, 0x0273, 0x0281, 0x026b, 0x0260, 0x0010, 0x0294,
    0x0010, 0x0010, 0x0192, 0x02d3, 0x028f, 0x0010, 0x0010, 0x018c, 0x0010, 0x0010, 0x0273, 0x02e3, 0x025d, 0x0260, 0x0010, 0x026f,
    0x0010, 0x0010, 0x0273, 0x02f3, 0x025d, 0x0260, 0x0293, 0x018d, 0x0010, 0x0010, 0x0301, 0x030f, 0x028f, 0x0260, 0x0010, 0x026f,
    0x0010, 0x0010, 0x0010, 0x031e, 0x032d, 0x0010, 0x0260, 0x0010, 0x0010, 0x0010, 0x033d, 0x0348, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0357, 0x0364, 0x0010, 0x0010, 0x0010, 0x025a, 0x0010, 0x0373, 0x0010, 0x0010, 0x0010, 0x0144, 0x0381, 0x038e,
    0x00f7, 0x0227, 0x0290, 0x0010, 0x0010, 0x0010, 0x039e, 0x03ab, 0x0010, 0x03ba, 0x03c9, 0x01b2, 0x03d7, 0x03e7, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x03f7, 0x03f7, 0x03f7, 0x03f7, 0x03f7, 0x03f7, 0x0407, 0x0407, 0x0407, 0x0407, 0x040f, 0x0417,
    0x0417, 0x0417, 0x0417, 0x0417, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0193, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0427,
    0x0010, 0x026e, 0x0010, 0x0260, 0x0010, 0x0260, 0x0010, 0x0010, 0x0010, 0x0141, 0x00f7, 0x01de, 0x0010, 0x0010, 0x042d, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x025d, 0x0010, 0x01e2, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0228, 0x0228,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0185, 0x0010, 0x0010, 0x0010,
    0x043d, 0x044d, 0x0452, 0x0010, 0x0010, 0x0010, 0x00f7, 0x00f8, 0x0010, 0x0010, 0x0010, 0x018c, 0x0010, 0x0010, 0x0141, 0x018c,
    0x0010, 0x0181, 0x018d, 0x018e, 0x0010, 0x0460, 0x0010, 0x0010, 0x0010, 0x013f, 0x018d, 0x0010, 0x0010, 0x0141, 0x01da, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x023e, 0x0465, 0x046e, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x0478, 0x0488, 0x0498, 0x04a8, 0x04b7,
    0x0010, 0x04c7, 0x04d7, 0x04e5, 0x0010, 0x04ea, 0x0010, 0x0010, 0x00f7, 0x00f7, 0x0190, 0x04f7, 0x0504, 0x0513, 0x04b7, 0x0010,
    0x0520, 0x0530, 0x0532, 0x0048, 0x0542, 0x054c, 0x0557, 0x0010, 0x0565, 0x056e, 0x0010, 0x057e, 0x0588, 0x0597, 0x05a6, 0x05b4,
    0x05be, 0x05ce, 0x0010, 0x05d6, 0x05b7, 0x05e1, 0x05e7, 0x0010, 0x0010, 0x0010, 0x0010, 0x05f4, 0x0600, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x060b, 0x0010, 0x0010, 0x0010, 0x0614, 0x0010, 0x0624, 0x0634, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0644, 0x0125, 0x010d, 0x0125, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0652, 0x0660, 0x0670, 0x067e, 0x068c, 0x069c, 0x06ac, 0x06bc, 0x06cb, 0x06cb, 0x06db, 0x06e7,
    0x06f7, 0x0707, 0x0717, 0x0727, 0x0737, 0x0743, 0x074c, 0x0756, 0x0764, 0x0772, 0x0782, 0x078f, 0x079b, 0x07a8, 0x07b6, 0x07c5,
    0x07d2, 0x011f, 0x0010, 0x07dd, 0x0612, 0x07e4, 0x0010, 0x0010, 0x0010, 0x0010, 0x07f4, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x07ff, 0x0807, 0x0010, 0x0010, 0x0010, 0x0813, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x018f, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7, 0x00f7, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0823, 0x0829, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0835, 0x0823, 0x0823, 0x0823,
    0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0845, 0x0010, 0x0823, 0x0823, 0x0855, 0x0865,
    0x0822, 0x0823, 0x0823, 0x0823, 0x0823, 0x0875, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x081e, 0x0823, 0x0823, 0x0822,
    0x0823, 0x0823, 0x0823, 0x0823, 0x0824, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0881, 0x0823, 0x0824, 0x0823, 0x0823, 0x0890,
    0x0823, 0x0823, 0x0823, 0x0823, 0x08a0, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823,
    0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0010, 0x0010, 0x0010, 0x0010, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823,
    0x0823, 0x08aa, 0x0823, 0x0823, 0x0823, 0x08b0, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x08c0, 0x0010, 0x0192,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x018f, 0x08ce, 0x0010, 0x08db, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x018f, 0x0010,
    0x0010, 0x0141, 0x022e, 0x0010, 0x00f7, 0x08eb, 0x0010, 0x0010, 0x08f4, 0x0010, 0x016d, 0x018d, 0x03f7, 0x0904, 0x018d, 0x0010,
    0x0010, 0x0142, 0x0190, 0x0010, 0x0291, 0x0010, 0x0010, 0x016b, 0x01db, 0x0911, 0x0010, 0x0010, 0x091f, 0x0010, 0x0010, 0x0010,
    0x092f, 0x01c7, 0x0010, 0x0181, 0x025d, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x093a, 0x0010, 0x094a, 0x094e, 0x095b, 0x0952, 0x095b, 0x0956, 0x095b, 0x094a, 0x094e, 0x095b, 0x0952,
    0x095b, 0x0956, 0x095b, 0x094a, 0x094e, 0x095b, 0x0952, 0x095b, 0x0956, 0x095b, 0x094a, 0x094e, 0x095b, 0x0952, 0x095b, 0x0967,
    0x0407, 0x0977, 0x0417, 0x0417, 0x0982, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125,
    0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0010, 0x0297, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7, 0x08ad, 0x0010, 0x0823, 0x0823, 0x0992, 0x099b, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x09a7, 0x0822, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x09a6, 0x0010, 0x0010, 0x09b7, 0x0010,
    0x0010, 0x0010, 0x0010, 0x08b0, 0x09c7, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x09d5, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0190, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0186, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x09e4, 0x0010, 0x0010, 0x09f4, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x025d, 0x0010, 0x0010, 0x09ec, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0a04, 0x0010, 0x0010, 0x0010, 0x0010, 0x0193, 0x0010, 0x0010, 0x0010, 0x0010, 0x013f, 0x0190, 0x0010,
    0x0010, 0x0427, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x018e, 0x0010, 0x0010, 0x016c, 0x01db, 0x0010, 0x0010,
    0x0a14, 0x018e, 0x0010, 0x0010, 0x0a23, 0x0a31, 0x0010, 0x0010, 0x0010, 0x018e, 0x0010, 0x016d, 0x018c, 0x025d, 0x0010, 0x0010,
    0x0293, 0x018e, 0x0010, 0x0010, 0x0142, 0x0a41, 0x0010, 0x0010, 0x0010, 0x0194, 0x0a4f, 0x01c7, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x01d7, 0x0010, 0x018d, 0x0010, 0x0010, 0x0301, 0x0a5f, 0x028f, 0x0a6d, 0x018c, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0140, 0x01db, 0x0297, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7,
    0x018d, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x0459, 0x0190, 0x0a7a, 0x0010,
    0x0010, 0x0010, 0x00f7, 0x0190, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0181, 0x01da, 0x0010, 0x0010, 0x0010, 0x0010, 0x0193,
    0x0a8a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0194, 0x01d7,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0a9a, 0x0aa8, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0ab7, 0x0ac6, 0x0010, 0x0ad5, 0x0010, 0x0010, 0x0ae2, 0x028f, 0x01d6, 0x0010,
    0x0010, 0x0af1, 0x01d8, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0191, 0x0afb, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0143, 0x038e, 0x01db, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b0b, 0x0b1a, 0x0010, 0x0010, 0x0010, 0x0182, 0x01fe, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b27, 0x0b37, 0x0010,
    0x0010, 0x0b43, 0x018e, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b53, 0x013e,
    0x022e, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x018c, 0x0010, 0x0010, 0x0010, 0x01db, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0191, 0x0144, 0x00f7, 0x00f7, 0x0b63, 0x018e, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b73, 0x018f, 0x0823, 0x0823, 0x0823,
    0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x08af, 0x0823, 0x0823, 0x0823,
    0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0845, 0x0010, 0x0010, 0x08ae, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0b83, 0x0823, 0x0823,
    0x09a4, 0x0b92, 0x0010, 0x0ba2, 0x0bae, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823,
    0x0823, 0x0823, 0x0823, 0x0823, 0x08ab, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0bb6, 0x0bc6,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7, 0x00f7, 0x0bd6, 0x00f7, 0x01db, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0be4, 0x0bf1, 0x0bfe, 0x0010, 0x0c0a, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x026e,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x00f7, 0x00f7, 0x00f7, 0x0a8f, 0x00f7,
    0x00f7, 0x0227, 0x0291, 0x0292, 0x0181, 0x0144, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0afb, 0x0456, 0x0c1a, 0x0010, 0x0010,
    0x0010, 0x0010, 0x0010, 0x0191, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0297, 0x0010,
    0x0010, 0x0010, 0x0194, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0010, 0x0194, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x01db,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0368, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
    0x0c2a, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x0707, 0x06cb, 0x06cb, 0x06cb,
    0x0c3a, 0x0125, 0x0c4a, 0x0125, 0x0125, 0x0125, 0x0c5a, 0x0c6a, 0x0c7a, 0x0c89, 0x0c94, 0x06cb, 0x06cb, 0x06cb, 0x0ca1, 0x0ca7,
    0x0cb7, 0x0cc7, 0x0cd2, 0x0cdf, 0x0cef, 0x0cff, 0x06e5, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb,
    0x0d0f, 0x0d0f, 0x0d1e, 0x0d2b, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d32, 0x0d0f, 0x06e7, 0x0d0f, 0x0d0f, 0x0d40, 0x06e7, 0x0d0f, 0x0d4f,
    0x0d0f, 0x0d0f, 0x0d0f, 0x0d10, 0x0d5f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d62,
    0x0d0f, 0x0d0f, 0x0d0f, 0x0d71, 0x0d7f, 0x0d0f, 0x06e3, 0x070c, 0x06cb, 0x073c, 0x0c2a, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x0d04,
    0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0010, 0x0010, 0x0010, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d8f, 0x0d9f, 0x0daf, 0x0dbc,
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0dcc, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0ddc, 0x0d13, 0x0dec,
    0x0dfc, 0x0010, 0x0010, 0x0010, 0x0e00, 0x0dfe, 0x0010, 0x0010, 0x0e00, 0x0010, 0x0e10, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb,
    0x0e20, 0x0d0f, 0x0d0f, 0x0e2c, 0x0e31, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f, 0x0d0f,
    0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x0d12, 0x0d16, 0x0d0f, 0x0d0f, 0x0e38, 0x0e47, 0x0d13, 0x0d16, 0x0d16,
    0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb, 0x06cb,
    0x0dee, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823, 0x0823,
    0x0e57, 0x0e67, 0x0000, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7, 0x00f7,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0125, 0x0127,
};
static constexpr uint8_t s_stage4[] = {
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x41, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0x4c, 0xc0, 0x40, 0x40, 0x01, 0xcc,
    0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40,
    0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0xc0,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0,
    0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x03, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x03, 0x03, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
    0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x0b, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x0b, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x0b, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x0b, 0x43, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x40,
    0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x40, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x00, 0x00, 0x00, 0x02, 0x40, 0x40, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86,
    0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x01, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x00, 0x02,
    0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x01, 0x02, 0x04, 0x01, 0x01, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0,
    0x41, 0x41, 0x01, 0x01, 0x01, 0x01, 0x01, 0x40, 0xc0, 0x40, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0x4c, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0xcc, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0xc0, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0,
    0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c,
    0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x4c, 0x4c, 0x40, 0x40,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xcc, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40,
    0xcc, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0xc0,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x8c, 0x8c, 0x40, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xc0, 0x4c, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x4c, 0x4c, 0x4c, 0x40,
    0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0x4c, 0xcc, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc, 0xcc, 0xcc, 0x4c, 0xcc, 0xcc,
    0xcc, 0xcc, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x8c, 0x8c, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x8c, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0x8c, 0xcc, 0x8c, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0x8c,
    0xcc, 0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x40, 0x40, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x40, 0x4c, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x4c, 0x40, 0x40,
    0x40, 0x40, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x8c, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x02, 0x02,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x8c, 0x80, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86,
    0x86, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x02, 0x00, 0x40, 0x40, 0x02,
    0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a,
    0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x40, 0x40,
    0x40, 0x40, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x01, 0x01, 0x01, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x03, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x03, 0x40,
    0x40, 0x02, 0x40, 0x43, 0x43, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02,
    0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x40, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x43, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x43, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x43, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x43, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x80, 0x80, 0x80, 0x80, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
    0x80, 0x80, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x01, 0x01, 0x01, 0x01, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x4c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x8c, 0xc0, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
    0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x80, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x80, 0x4c, 0x4c, 0x4c, 0x4c, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c,
    0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x8c,
    0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
    0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c,
    0x8c, 0x8c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x41, 0x01, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
};
static constexpr uint8_t s_joinRules[13][13] = {
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0,
    0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
};
[[msvc::forceinline]] constexpr uint8_t ucdLookup(const char32_t cp) noexcept
{
    const auto s1 = s_stage1[cp >> 12];
    const auto s2 = s_stage2[s1 + ((cp >> 8) & 15)];
    const auto s3 = s_stage3[s2 + ((cp >> 4) & 15)];
    const auto s4 = s_stage4[s3 + ((cp >> 0) & 15)];
}
[[msvc::forceinline]] constexpr uint8_t ucdGraphemeJoins(const uint8_t lead, const uint8_t trail) noexcept
{
    const auto l = lead & 15;
    const auto t = trail & 15;
    return s_joinRules[l][t];
}
[[msvc::forceinline]] constexpr int ucdToCharacterWidth(const uint8_t val) noexcept
{
    return val >> 6;
}
// clang-format on

static CodepointWidthDetector s_codepointWidthDetector;

CodepointWidthDetector& CodepointWidthDetector::Singleton() noexcept
{
    return s_codepointWidthDetector;
}

size_t CodepointWidthDetector::GraphemeNext(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    const auto len = str.size();
    if (offset == len)
    {
        return 0;
    }

    char32_t cp;
    U16_NEXT_OR_FFFD(str, offset, len, cp);
    auto lead = ucdLookup(cp);

    int totalWidth = 0;

    for (;;)
    {
        auto w = ucdToCharacterWidth(lead);
        // "Unqualified emojis" leave their representation (text/colored) open to the renderer.
        // U+FE0F (variation selector 16) forces colored representation. For any ambiguous width emoji like ®
        // VS-16 is commonly expected to allocate 2 cells, because it'll be drawn as a chunky, colored glyph.
        // Technically we'd have to check if the preceding character was an emoji, but we currently use an optimally packed UCPTRIE_8
        // and adding this 1 bit of information would double its size. Let's wait and see if anyone notices this bug in the first place...
        if (cp == 0xfe0f)
        {
            w = 2;
        }
        if (w == 3)
        {
            w = _checkFallbackViaCache(cp);
        }

        totalWidth += w;

        if (offset == len)
        {
            break;
        }

        auto off = offset;
        U16_NEXT_OR_FFFD(str, off, len, cp);
        const auto trail = ucdLookup(cp);

        if (!ucdGraphemeJoins(lead, trail))
        {
            break;
        }

        offset = off;
        lead = trail;
    }

    if (width)
    {
        *width = totalWidth < 1 ? 1 : (totalWidth > 2 ? 2 : totalWidth);
    }
    return offset;
}

// This code is identical to GraphemeNext() but with the order of operations reversed since we're iterating backwards.
size_t CodepointWidthDetector::GraphemePrev(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    if (offset == 0)
    {
        return 0;
    }

    char32_t cp;
    U16_PREV_OR_FFFD(str, 0, offset, cp);
    auto trail = ucdLookup(cp);

    int totalWidth = 1;

    for (;;)
    {
        auto w = ucdToCharacterWidth(trail);
        // "Unqualified emojis" leave their representation (text/colored) open to the renderer.
        // U+FE0F (variation selector 16) forces colored representation. For any ambiguous width emoji like ®
        // VS-16 is commonly expected to allocate 2 cells, because it'll be drawn as a chunky, colored glyph.
        // Technically we'd have to check if the preceding character was an emoji, but we currently use an optimally packed UCPTRIE_8
        // and adding this 1 bit of information would double its size. Let's wait and see if anyone notices this bug in the first place...
        if (cp == 0xfe0f)
        {
            w = 2;
        }
        if (w == 3)
        {
            w = _checkFallbackViaCache(cp);
        }

        totalWidth += w;

        if (offset == 0)
        {
            break;
        }

        auto off = offset;
        U16_PREV_OR_FFFD(str, 0, off, cp);
        const auto lead = ucdLookup(cp);

        if (!ucdGraphemeJoins(lead, trail))
        {
            break;
        }

        offset = off;
        trail = lead;
    }

    if (width)
    {
        *width = totalWidth < 1 ? 1 : (totalWidth > 2 ? 2 : totalWidth);
    }
    return offset;
}

int CodepointWidthDetector::GetWidth(const std::wstring_view& glyph) noexcept
{
    int width;
    GraphemeNext(glyph, 0, &width);
    return width;
}

// Call the function specified via SetFallbackMethod() to turn CodepointWidth::Ambiguous into Narrow/Wide.
// Caches the results in _fallbackCache. This is _lookupGlyphWidth's even-slower-path.
__declspec(noinline) int CodepointWidthDetector::_checkFallbackViaCache(const char32_t codepoint) noexcept
try
{
    // Ambiguous glyphs are considered narrow by default. See microsoft/terminal#2066 for more info.
    if (!_pfnFallbackMethod)
    {
        return 1;
    }

    if (const auto it = _fallbackCache.find(codepoint); it != _fallbackCache.end())
    {
        return it->second;
    }

    wchar_t buf[2];
    size_t len = 0;
    U16_APPEND_UNSAFE(buf, len, codepoint);

    const uint8_t width = _pfnFallbackMethod({ &buf[0], len }) ? 2 : 1;
    _fallbackCache.insert_or_assign(codepoint, width);
    return width;
}
catch (...)
{
    LOG_CAUGHT_EXCEPTION();
    return 1;
}

// Method Description:
// - Sets a function that should be used as the fallback mechanism for
//      determining a particular glyph's width, should the glyph be an ambiguous
//      width.
//   A Terminal could hook in a Renderer's IsGlyphWideByFont method as the
//      fallback to ask the renderer for the glyph's width (for example).
// Arguments:
// - pfnFallback - the function to use as the fallback method.
// Return Value:
// - <none>
void CodepointWidthDetector::SetFallbackMethod(std::function<bool(const std::wstring_view&)> pfnFallback) noexcept
{
    _pfnFallbackMethod = std::move(pfnFallback);
}

// Method Description:
// - Resets the internal ambiguous character width cache mechanism
//   since it will be different when the font changes and we should
//   re-query the new font for that information.
// Arguments:
// - <none>
// Return Value:
// - <none>
void CodepointWidthDetector::ClearFallbackCache() noexcept
{
#pragma warning(suppress : 26447) // The function is declared 'noexcept' but calls function 'clear()' which may throw exceptions (f.6).
    _fallbackCache.clear();
}
